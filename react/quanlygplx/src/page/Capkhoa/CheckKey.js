import { useState, useEffect } from "react";
import Swal from "sweetalert2";
import API from '../../utils/request';
import './createKey.scss'

const useVerifyKey = () => {
    const [isVerifying, setIsVerifying] = useState(false);
    const [accountId, setAccountId] = useState('');

    useEffect(() => {
        const fetchAccountId = () => {
            const accountIdFromCookie = getAccountIdFromCookie();
            if (accountIdFromCookie) {
                console.log("AccountId t·ª´ cookie:", accountIdFromCookie);
                setAccountId(accountIdFromCookie);
                return;
            }
            
            const accountIdFromToken = getAccountIdFromToken();
            if (accountIdFromToken) {
                console.log("AccountId t·ª´ token:", accountIdFromToken);
                setAccountId(accountIdFromToken);
            } else {
                console.error('Kh√¥ng th·ªÉ l·∫•y Account ID t·ª´ cookie ho·∫∑c token.');
            }
        };
        
        fetchAccountId();
    }, []);

    const getAccountIdFromCookie = () => {
        const cookies = document.cookie.split(';');
        for (let cookie of cookies) {
            cookie = cookie.trim();
            if (cookie.startsWith('accountId=')) {
                return cookie.substring('accountId='.length);
            }
        }
        return null;
    };

    const getAccountIdFromToken = () => {
        try {
            const token = localStorage.getItem('token');
            if (!token) return null;
            const payload = JSON.parse(atob(token.split('.')[1]));
            return payload.accountId || payload.sub;
        } catch (error) {
            console.error('L·ªói khi gi·∫£i m√£ token:', error);
            return null;
        }
    };

    const verifyKey = async () => {        
        if (!accountId) {
            Swal.fire("L·ªói", "Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n!", "error");
            return null;
        }
    
        const { value: privateKey } = await Swal.fire({
            title: "Nh·∫≠p kh√≥a b√≠ m·∫≠t",
            input: "password",
            inputPlaceholder: "D√°n kh√≥a b√≠ m·∫≠t v√†o ƒë√¢y...",
            showCancelButton: true,
            confirmButtonText: "X√°c nh·∫≠n",
            cancelButtonText: "H·ªßy",
            customClass: {
                confirmButton: "pink-confirm",
                cancelButton: "pink-cancel"
              },
            preConfirm: (privateKey) => {
                if (!privateKey ||
                    !privateKey.startsWith("-----BEGIN PRIVATE KEY-----") ||
                    !privateKey.endsWith("-----END PRIVATE KEY-----")) {
                    Swal.showValidationMessage("üîí Kh√≥a b√≠ m·∫≠t kh√¥ng h·ª£p l·ªá!");
                    return null;
                }
                return privateKey;
            }
        });
    
        if (!privateKey) {
            console.error("Ng∆∞·ªùi d√πng kh√¥ng nh·∫≠p kh√≥a b√≠ m·∫≠t ho·∫∑c ƒë√£ h·ªßy!");
            return null;
        }
    
        console.log("ƒêang ki·ªÉm tra kh√≥a b√≠ m·∫≠t...");
        setIsVerifying(true);
    
        try {
            const response = await fetch(`${API.BASEURL}/verify-key`, {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ privateKey, accountId })
            });
    
            const result = await response.json();
    
            if (!response.ok || !result.success) {
                console.error("L·ªói x√°c minh kh√≥a:", result.message);
                Swal.fire("L·ªói", result.message || "Kh√≥a b√≠ m·∫≠t kh√¥ng ƒë√∫ng!", "error");
                return result;  // Tr·∫£ v·ªÅ d·ªØ li·ªáu t·ª´ API, ngay c·∫£ khi th·∫•t b·∫°i
            }
    
            Swal.fire("Th√†nh c√¥ng", "Kh√≥a b√≠ m·∫≠t h·ª£p l·ªá!", "success");
            return result;  // Tr·∫£ v·ªÅ to√†n b·ªô d·ªØ li·ªáu ph·∫£n h·ªìi t·ª´ API khi th√†nh c√¥ng
        } catch (error) {
            console.error("L·ªói khi g·ªçi API verify-key:", error);
            Swal.fire("L·ªói", "C√≥ l·ªói x·∫£y ra khi ki·ªÉm tra kh√≥a b√≠ m·∫≠t.", "error");
            return { error: "L·ªói khi ki·ªÉm tra kh√≥a b√≠ m·∫≠t", details: error };
        } finally {
            setIsVerifying(false);
        }
    };    

    return { verifyKey, isVerifying };
};

export default useVerifyKey;
